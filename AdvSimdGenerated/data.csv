Abs|This method calculates the absolute value of each vector element `value` and returns the result.|<-11, -12, -13, 14>|<11, 12, 13, 14>|||
AbsSaturate|This method calculates signed saturating absolute value. It calculates saturated absolute value of each vector element of `value`. If any element's absolute value is outside the range, the result is saturated. In below example, 1st lane value is `-32768` which is `ushort.MinValue`. It's absolute value would be `32768`, but since it is out of range, it is saturated to `32767` which is `ushort.MaxValue`.|<-32768, -12, -13, 32767>|<32767, 12, 13, 32767>|||
AbsScalar|This method calculates floating-point absolute value, similar to `Abs` but operates on scalar. The absolute value of source is taken and returned.|<-11.5>|<11.5>|||
AbsoluteCompareGreaterThan|This method performs comparison of absolute value of each vector element in `left` with the absolute value of the corresponding vector element in `right` and if the `left`'s value is greater than the `right`'s value, sets every bit of the corresponding vector element in the  result to one, otherwise sets every bit of the corresponding vector element in the result to zero.|<-11.5f, -12.5f>|<10.5f, -22.5f>|<NaN, 0>||
AbsoluteCompareGreaterThanOrEqual|This method performs comparison of absolute value of each vector element in `left` with the absolute value of the corresponding vector element in `right` and if the `left`'s value is greater than or equal to the `right`'s value, sets every bit of the corresponding vector element in the  result to one, otherwise sets every bit of the corresponding vector element in the result to zero.|<-11.5f, -12.5f>|<11.5f, -22.5f>|<NaN, 0>||
AbsoluteCompareLessThan|This method performs comparison of absolute value of each vector element in `left` with the absolute value of the corresponding vector element in `right` and if the `left`'s value is less than to the `right`'s value, sets every bit of the corresponding vector element in the  result to one, otherwise sets every bit of the corresponding vector element in the result to zero.|<-11.5f, -12.5f>|<10.5f, -22.5f>|<0, NaN>||
AbsoluteCompareLessThanOrEqual|This method performs comparison of absolute value of each vector element in `left` with the absolute value of the corresponding vector element in `right` and if the `left`'s value is less than or equal to the `right`'s value, sets every bit of the corresponding vector element in the  result to one, otherwise sets every bit of the corresponding vector element in the result to zero.|<-11.5f, -12.5f>|<11.5f, -22.5f>|<0, NaN>||
AbsoluteDifference|This method subtracts the elements of the vector of the second source SIMD&FP register from the corresponding elements of the first source SIMD&FP register, places the absolute values of the results into a vector, and writes the vector to the destination SIMD&FP register.|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 37, 17>|<10, 10, 10, 10, 10, 10, 20, 1>||
AbsoluteDifferenceAdd|This method subtracts the elements of the vector of `right` from the corresponding elements `left`, and accumulates the absolute values of the results along with the values of `addend` and returns the accumulated result.|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 52, 23, 24, 25, 26, 27, 28>|<41, 32, 33, 34, 35, 36, 37, 38>|<31, 32, 23, 24, 25, 26, 27, 28>|
AbsoluteDifferenceWideningLower|This method subtracts the vector elements in the `right` from the corresponding vector elements of `left`, places the absolute value returns result that is of twice size as the input.|<11, 2, 113, 104, 180, 11, 120, 121>|<21, 22, 23, 24, 25, 26, 27, 28>|<10, 20, 90, 80, 155, 15, 93, 93>||
AbsoluteDifferenceWideningLowerAndAdd|This method subtracts the vector elements in the lower half of the `right` from the corresponding vector elements of `left`, and accumulates the absolute values of the result along with the values of  `addend` and return the accumulated value. The result is twice as long as input.|<100, 200, 300, 100, 100, 100, 100, 100>|<11, 2, 113, 104, 180, 11, 120, 121>|<21, 22, 23, 24, 25, 26, 27, 28>|<110, 220, 390, 180, 1155, 115, 193, 193>|
AbsoluteDifferenceWideningUpper|This method subtracts the vector elements in upper half of `right` from the corresponding vector elements of `left`,  places the absolute value of the result which is a vector that is twice as long as input vectors.|<11, 208, 103, 184, 180, 21, 130, 151, 31, 2, 113, 104, 180, 11, 120, 121>|<21, 22, 23, 24, 25, 26, 27, 28, 20, 122, 231, 24, 25, 26, 27, 28>|<11, 120, 118, 80, 155, 15, 93, 93>||
AbsoluteDifferenceWideningUpperAndAdd|This method subtracts the vector elements in upper half of `right` from the corresponding vector elements of `left`,  accumulates the absolute value of the result along with `addened` and return the accumulated value. The result is twice as long as input.|<100, 200, 300, 100, 100, 100, 100, 100>|<11, 208, 103, 184, 180, 21, 130, 151, 31, 2, 113, 104, 180, 11, 120, 121>|<21, 22, 23, 24, 25, 26, 27, 28, 20, 122, 231, 24, 25, 26, 27, 28>|<111, 320, 418, 180, 255, 115, 193, 193>|
Add|This method adds the vector elements in the `left` with the corresponding vector elements of `right`, and returns the result.|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<32, 34, 36, 38, 40, 42, 44, 46>||
AddHighNarrowingLower|This method adds each vector element in the `left` to the corresponding vector element in the `right`, places the most significant half of the result into the lower half of result and return it. Result vector is half the size of input vector.|<100, 200, 300, 400, 500, 600, 700, 800>|<900, 1000, 1100, 1200, 1300, 1400, 1500, 1600>|<3, 4, 5, 6, 7, 7, 8, 9>||
AddHighNarrowingUpper|This method adds each vector element in the `left` to the corresponding vector element in the `right`, places the most significant half of the result into upper half of a vector. The lower half of vector is set to the elements in `lower` and returns that vector.|<1, 255, 13, 41, 54, 61, 71, 18>|<100, 200, 300, 400, 500, 600, 700, 800>|<900, 1000, 1100, 1200, 1300, 1400, 1500, 1600>|<1, 255, 13, 41, 54, 61, 71, 18, 3, 4, 5, 6, 7, 7, 8, 9>|
AddPairwise|This method  creates a vector by concatenating the vector elements of `left` vector after the vector elements of the `right` vector, reads each pair of adjacent vector elements from the concatenated vector, adds each pair of values together, places the result into a vector, and returns the vector.|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<23, 27, 31, 35, 43, 47, 51, 55>||
AddPairwiseWidening|This method adds pairs of adjacent unsigned integer values from the vector in the `value` vector, places the result into a vector, and returns the vector. The result vector elements are twice as long as the input's vector elements.|<11, 12, 13, 14, 15, 16, 17, 18>|<23, 27, 31, 35>|||
AddPairwiseWideningAndAdd|This method adds pairs of adjacent unsigned integer values from the `value` vector and accumulates the results with the vector elements of the `addend` vector. The result vector elements are twice as long as the source vector elements.|<11, 12, 13, 14>|<11, 12, 13, 14, 15, 16, 17, 18>|<34, 39, 44, 49>||
AddPairwiseWideningAndAddScalar|This method adds pairs of adjacent unsigned integer values from `value` vector and accumulates the results with the vector elements of `addend`. The result vector elements are twice as long as the source vector elements.|<11>|<11, 12>|<34>||
AddPairwiseWideningScalar|This method adds pairs of adjacent signed integer values from the `value` vector, places the result into a vector, and returns the vector. The result vector elements are twice as long as the source vector elements.|<11, 12>|<23>|||
AddRoundedHighNarrowingLower|This method adds each vector element in `left` vector to the corresponding vector element in `right` vector, places the most significant half of the result into a vector, and writes the vector to the lower half of the result. The results are rounded.|<100, 200, 300, 400, 500, 600, 700, 800>|<900, 1000, 1100, 1200, 1300, 1400, 1500, 1600>|<4, 5, 5, 6, 7, 8, 9, 9>||
AddRoundedHighNarrowingUpper|This method adds each vector element in `left` vector to the corresponding vector element in `right` vector, places the most significant half of the result into a vector, and writes the vector to the upper half of the result. The lower half is set to the elements in `lower`. The results are rounded.|<1, 255, 13, 41, 54, 61, 71, 18>|<100, 200, 300, 400, 500, 600, 700, 800>|<900, 1000, 1100, 1200, 1300, 1400, 1500, 1600>|<1, 255, 13, 41, 54, 61, 71, 18, 4, 5, 5, 6, 7, 8, 9, 9>|
AddSaturate|This method adds the values of corresponding elements of the `left` and `right` vectors, places the results into a vector, and writes the vector to the destination SIMD&FP register. If overflow occurs with any of the results, those results are saturated. |<155, 200, 200, 1, 5, 16, 17, 18>|<155, 100, 100, 2, 25, 26, 27, 28>|<255, 255, 255, 3, 30, 42, 44, 46>||
AddSaturateScalar|This method `scalar` variant, adds the values of corresponding elements of the `left` and `right` vectors, places the results into a vector, and writes the vector to the destination SIMD&FP register. If overflow occurs with any of the results, those results are saturated. |<11>|<11>|<22>||
AddScalar|This method adds the floating-point values of the two source vectors, and writes the result to the result. This performs scalar operation.|<11.5>|<11.5>|<23>||
AddWideningLower|This method adds each vector element in the lower half of `left` to the corresponding vector element of `right`, places the result into a vector, and returns the vector. The result vector elements are twice as long as the source vector elements.|<155, 200, 200, 1, 5, 16, 17, 18>|<155, 100, 100, 2, 25, 26, 27, 28>|<310, 300, 300, 3, 30, 42, 44, 46>||
AddWideningUpper|This method adds each vector element in the upper half of `left` to the corresponding vector element of `right`, places the result into a vector, and returns the vector. The result vector elements are twice as long as the source vector elements.|<11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26>|<21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36>|<48, 50, 52, 54, 56, 58, 60, 62>||
And|This method ands the vector elements in the `left` with the corresponding vector elements of `right`, and returns the result.|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<1, 4, 5, 8, 9, 16, 17, 16>||
BitwiseClear|This method performs AND of `value` and complement of `mask` and returns the result out of the operation.|<255, 255, 255, 255, 255, 255, 255, 255>|<1, 2, 4, 8, 16, 32, 64, 128>|<254, 253, 251, 247, 239, 223, 191, 127>||
BitwiseSelect|This method sets each bit in the result to the corresponding bit from the `left` vector when the `select` vector's bit was 1, otherwise from the `right` vector.|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<31, 32, 33, 34, 35, 36, 37, 38>|<21, 36, 37, 40, 41, 52, 53, 52>|
Ceiling|This method rounds a vector of floating-point values in `value` to integral floating-point values of the same size using the Round towards Plus Infinity rounding mode, and returns the result. A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.|<11.5, 12.5>|<12, 13>|||
CeilingScalar|Same as `Ceiling` above but operates at scalar level.|<11.5>|<12>|||
CompareEqual|This method compares each vector element from `left` with the corresponding vector element from the `right`, and if the comparison is equal sets every bit of the corresponding vector element in the result to one, otherwise sets every bit of the corresponding vector element in the result to  zero.|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 22,13, 14, 25, 26, 27, 28>|<255, 0, 255, 255, 0, 0, 0, 0>||
CompareGreaterThan|This method compares each vector element in the `left` vector with the corresponding vector element in the `right` and if the `left`'s unsigned integer value is greater than the `right`'s unsigned integer value sets every bit of the corresponding vector element in the reesult to one, otherwise sets every bit of the corresponding vector element in the result to zero.|<31, 12, 33, 34, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<255, 0, 255, 255, 0, 0, 0, 0>||
CompareGreaterThanOrEqual|This method compares each vector element in the `left` vector with the corresponding vector element in the `right` and if the `left`'s unsigned integer value is greater than or equal to the `right`'s unsigned integer value sets every bit of the corresponding vector element in the reesult to one, otherwise sets every bit of the corresponding vector element in the result to zero.|<31, 22, 33, 34, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<255, 255, 255, 255, 0, 0, 0, 0>||
CompareLessThan|This method compares each vector element in the `left` vector with the corresponding vector element in the `right` and if the `left`'s unsigned integer value is less than the `right`'s unsigned integer value sets every bit of the corresponding vector element in the reesult to one, otherwise sets every bit of the corresponding vector element in the result to zero.|<11, 12, 13, 14, 15, 16, 17, 18>|<1, 22, 3, 4, 25, 26, 27, 28>|<0, 255, 0, 0, 255, 255, 255, 255>||
CompareLessThanOrEqual|This method compares each vector element in the `left` vector with the corresponding vector element in the `right` and if the `left`'s unsigned integer value is less than or equal to the `right`'s unsigned integer value sets every bit of the corresponding vector element in the reesult to one, otherwise sets every bit of the corresponding vector element in the result to zero.|<11, 12, 13, 14, 15, 16, 17, 18>|<1, 12, 3, 4, 25, 26, 27, 28>|<0, 0, 0, 0, 255, 255, 255, 255>||
CompareTest|This method reads each vector element in the `left, performs an AND with the corresponding vector element in the `right`, and if the result is not zero, sets every bit of the corresponding vector element in the result to one, otherwise sets every bit of the corresponding vector element in the result to zero.|<11, 12, 13, 14, 15, 16, 17, 18>|<4, 22, 23, 24, 25, 26, 27, 28>|<0, 255, 255, 255, 255, 255, 255, 255>||
ConvertToInt32RoundAwayFromZero|This method converts each element in a vector from a floating-point value to a signed integer value using the Round to Nearest with [Ties to Away rounding mode](https://shrektan.com/post/2018/04/25/human-round-round-to-nearest-ties-away-from-zero/) and writes the result vector. |<11.5, 12.5>|<12, 13>|||
ConvertToInt32RoundAwayFromZeroScalar|This method converts from a floating-point value (scalar) to a signed integer value using the Round to Nearest with [Ties to Away rounding mode](https://shrektan.com/post/2018/04/25/human-round-round-to-nearest-ties-away-from-zero/) and writes the result vector. |<11.5, 12.5>|<12, 0>|||
ConvertToInt32RoundToEven|This instruction converts each element in a vector `value` from a floating-point value to a signed integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.|<11.5, 12.5>|<12, 12>|||
ConvertToInt32RoundToEvenScalar|This instruction converts a scalar `value` from a floating-point value to a signed integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.|<11.5, 12.5>|<12, 0>|||
ConvertToInt32RoundToNegativeInfinity|This instruction converts each element in a `value` vector from a floating-point value to a 32-bit or 64-bit signed integer using the Round towards Minus Infinity rounding mode, and writes the result to the general-purpose destination register.|<11.5, 12.5>|<11, 12>|||
ConvertToInt32RoundToNegativeInfinityScalar|This instruction converts the floating-point value in the `value` vector to a 32-bit or 64-bit signed integer using the Round towards Minus Infinity rounding mode, and writes the result to the general-purpose destination register.|<11.5, 12.5>|<11, 0>|||
ConvertToInt32RoundToPositiveInfinity|This instruction converts each element in a `value` vector from a floating-point value to a 32-bit or 64-bit signed integer using the Round towards Plus Infinity rounding mode, and writes the result to the general-purpose destination register.|<11.5, 12.5>|<12, 13>|||
ConvertToInt32RoundToPositiveInfinityScalar|This instruction converts the floating-point value in the `value` vector to a 32-bit or 64-bit signed integer using the Round towards Plus Infinity rounding mode, and writes the result to the general-purpose destination register.|<11.5, 12.5>|<12, 0>|||
ConvertToInt32RoundToZero|This method converts each element in a vector from a floating-point value to a signed integer value using the Round to Nearest with [toward zero rounding mode](https://shrektan.com/post/2018/04/25/human-round-round-to-nearest-ties-away-from-zero/) and writes the result vector. |<11.5, 12.5>|<11, 12>|||
ConvertToInt32RoundToZeroScalar|This method converts from a floating-point value (scalar) to a signed integer value using the Round to Nearest with [toward zero rounding mode](https://shrektan.com/post/2018/04/25/human-round-round-to-nearest-ties-away-from-zero/) and writes the result vector. |<11.5, 12.5>|<11, 0>|||
ConvertToSingle|This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the [FPCR](https://developer.arm.com/docs/ddi0595/h/aarch64-system-registers/fpcr), and returns the result.|<11, 12>|<11, 12>|||
ConvertToSingleScalar|This instruction converts the vector (scalar form) from fixed-point to floating-point using the rounding mode that is specified by the [FPCR](https://developer.arm.com/docs/ddi0595/h/aarch64-system-registers/fpcr), and returns the result.|<11, 12>|<11, 0>|||
ConvertToUInt32RoundAwayFromZero|This method converts each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest with [Ties to Away rounding mode](https://shrektan.com/post/2018/04/25/human-round-round-to-nearest-ties-away-from-zero/) and writes the result vector. |<11.5, 12.5>|<12, 13>|||
ConvertToUInt32RoundAwayFromZeroScalar|This method converts from a floating-point value (scalar) to an unsigned integer value using the Round to Nearest with [Ties to Away rounding mode](https://shrektan.com/post/2018/04/25/human-round-round-to-nearest-ties-away-from-zero/) and writes the result vector. |<11.5, 12.5>|<12, 0>|||
ConvertToUInt32RoundToEven|This instruction converts each element in a vector `value` from a floating-point value to an unsigned integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.|<11.5, 12.5>|<12, 12>|||
ConvertToUInt32RoundToEvenScalar|This instruction converts a scalar `value` from a floating-point value to an unsigned integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.|<11.5, 12.5>|<12, 0>|||
ConvertToUInt32RoundToNegativeInfinity|This instruction converts each element in a `value` vector from a floating-point value to a 32-bit or 64-bit unsigned integer using the Round towards Minus Infinity rounding mode, and writes the result to the general-purpose destination register.|<11.5, 12.5>|<11, 12>|||
ConvertToUInt32RoundToNegativeInfinityScalar|This instruction converts the floating-point value in the `value` vector to a 32-bit or 64-bit unsigned integer using the Round towards Minus Infinity rounding mode, and writes the result to the general-purpose destination register.|<11.5, 12.5>|<11, 0>|||
ConvertToUInt32RoundToPositiveInfinity|This instruction converts each element in a `value` vector from a floating-point value to a 32-bit or 64-bit unsigned integer using the Round towards Plus Infinity rounding mode, and writes the result to the general-purpose destination register.|<11.5, 12.5>|<12, 13>|||
ConvertToUInt32RoundToPositiveInfinityScalar|This instruction converts the floating-point value in the `value` vector to a 32-bit or 64-bit unsigned integer using the Round towards Plus Infinity rounding mode, and writes the result to the general-purpose destination register.|<11.5, 12.5>|<12, 0>|||
ConvertToUInt32RoundToZero|This method converts each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest with [toward zero rounding mode](https://shrektan.com/post/2018/04/25/human-round-round-to-nearest-ties-away-from-zero/) and writes the result vector. |<11.5, 12.5>|<11, 12>|||
ConvertToUInt32RoundToZeroScalar|This method converts from a floating-point value (scalar) to an unsigned integer value using the Round to Nearest with [toward zero rounding mode](https://shrektan.com/post/2018/04/25/human-round-round-to-nearest-ties-away-from-zero/) and writes the result vector. |<11.5, 12.5>|<11, 0>|||
DivideScalar|This instruction divides the floating-point values in the elements in the `left`, by the floating-point values in the corresponding elements in the `right` vector, places the results in a vector, and writes the vector to the destination SIMD&FP register.|<11>|<3.1>|<3.5483873>||
DuplicateSelectedScalarToVector64|This instruction creates a vector by duplicating the vector element at the specified element index `index in `value` vector into each element in the  result vector, and writes the result to the destination SIMD&FP register.|<11, 12, 13, 14, 15, 16, 17, 18>|3|<14, 14, 14, 14, 14, 14, 14, 14>||
DuplicateSelectedScalarToVector128|This instruction creates a vector by duplicating the vector element at the specified element index `index in `value` vector into each element in the  result vector which is double the size of `value`, and writes the result to the destination SIMD&FP register.|<11, 12, 13, 14, 15, 16, 17, 18>|3|<14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14>||
DuplicateToVector64|This instruction creates a vector by duplicating the `value` into each element in the  result vector, and writes the result to the destination SIMD&FP register.|5|<5, 5, 5, 5, 5, 5, 5, 5>|||
DuplicateToVector128|This instruction creates a vector by duplicating the `value` into each element in the  result vector, and writes the result to the destination SIMD&FP register.|7|<7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7>|||
Extract|This method extracts an element from `vector` at `index` and returns it.|<11, 12, 13, 14, 15, 16, 17, 18>|3|14||
ExtractNarrowingLower|This instruction reads each vector element from the `value`, narrows each value to half the original width, places the result into a vector, and writes the vector to the lower half of the result. The result vector elements are half as long as the source vector elements.|<300, 12, 413, 514, 15, 216, 117, 618>|<44, 12, 157, 2, 15, 216, 117, 106>|||
ExtractNarrowingSaturateLower|This instruction reads each vector element from the `value`, saturates each value to half the original width, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values.|<300, 12, 413, 514, 15, 216, 117, 618>|<255, 12, 255, 255, 15, 216, 117, 255>|||
ExtractNarrowingSaturateUnsignedLower|This instruction reads each signed integer value in the vector of the `value`, saturates the value to an unsigned integer value that is half the original width, places the result into a vector, and writes the vector to the lower half of the result while the upper half is zeroed. The result vector elements are half as long as the source vector elements.|<-300, -12, 413, 514, 15, 216, 117, 618>|<0, 0, 255, 255, 15, 216, 117, 255>|||
ExtractNarrowingSaturateUnsignedUpper|This instruction reads each signed integer value in the vector of the `value`, saturates the value to an unsigned integer value that is half the original width, places the result into a vector, and writes the vector to the upper half of the result while the lower half is untouched and is same as `lower`. The result vector elements size is half as long as the source vector elements.|<125, 12, 13, 14, 15, 216, 117, 18>|<-500, 500, 12, 14, 257, 16, 17, 18>|<125, 12, 13, 14, 15, 216, 117, 18, 0, 255, 12, 14, 255, 16, 17, 18>||
ExtractNarrowingSaturateUpper|This instruction reads each vector element from the `value`, saturates each value to half the original width, places the result into a upper half of result vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values.|<125, 12, 13, 14, 15, 216, 117, 18>|<500, 500, 12, 14, 257, 16, 17, 18>|<125, 12, 13, 14, 15, 216, 117, 18, 255, 255, 12, 14, 255, 16, 17, 18>||
ExtractNarrowingUpper|This instruction reads each vector element from the `value`, narrows each value to half the original width, places the result into upper half of result vector, and writes the vector to the lower half of the result. The result vector elements are half as long as the source vector elements.|<125, 12, 13, 14, 15, 216, 117, 18>|<500, 500, 12, 14, 257, 16, 17, 18>|<125, 12, 13, 14, 15, 216, 117, 18, 244, 244, 12, 14, 1, 16, 17, 18>||
ExtractVector64|This instruction extracts the lowest vector elements from the `lower` vector and the highest vector elements from the `upper` vector, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The `index` value specifies the lowest vector element to extract from the `upper` vector (and hence has to be less than size of vector), and consecutive elements are extracted from the first, then second, source registers until the result vector is filled.|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|5|<16, 17, 18, 21, 22, 23, 24, 25>|
ExtractVector128|This instruction extracts the lowest vector elements from the `lower` vector and the highest vector elements from the `upper` vector, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The `index` value specifies the lowest vector element to extract from the `upper` vector (and hence has to be less than size of vector), and consecutive elements are extracted from the first, then second, source registers until the result vector is filled.|<11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26>|<31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 42, 44, 45, 46>|5|<16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 34, 35>|
Floor|This instruction rounds a vector of floating-point values in the `value` vector to integral floating-point values of the same size using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register. A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.|<11.5, 12.5>|<11, 12>|||
FloorScalar|This instruction rounds a vector of floating-point values in the `value`  to integral floating-point values of the same size using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register. A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.|<11.5>|<11>|||
FusedAddHalving|This instruction adds corresponding unsigned integer values from the `left` and `right` vectors, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&FP register. The results are truncated.|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<16, 17, 18, 19, 20, 21, 22, 23>||
FusedAddRoundedHalving|This instruction adds corresponding unsigned integer values from the `left` and `right` vectors, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&FP register. The results are rounded.|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<16, 17, 18, 19, 20, 21, 22, 23>||
FusedMultiplyAdd|This instruction multiplies corresponding floating-point values in the vectors in the `left` and `right` vectors, adds the product to the corresponding vector element of the `addened` vector, and writes the result to the destination SIMD&FP register.|<11.5, 12.5>|<21.5, 22.5>|<11.5, 12.5>|<258.75, 293.75>|
FusedMultiplyAddNegatedScalar|This instruction multiplies the values of the `left and `right` vector, negates the product, subtracts the value of the third SIMD&FP source register, and writes the result to the destination SIMD&FP register.|<100.5>|<5.5>|<15.5>|<-185.75>|
FusedMultiplyAddScalar|This instruction multiplies corresponding floating-point values in the vectors in the `left` and `right` vectors, adds the product to the corresponding vector element of the `addened` vector, and writes the result to the destination SIMD&FP register.|<100.5>|<5.5>|<15.5>|<185.75>|
FusedMultiplySubtract|This instruction multiplies corresponding floating-point values in the vectors in the `left` and `right` vector, negates the product, adds the result to the corresponding vector element of `minuend` vector, and writes the result to the destination SIMD&FP register.|<11.5, 12.5>|<21.5, 22.5>|<11.5, 12.5>|<-235.75, -268.75>|
FusedMultiplySubtractNegatedScalar|This instruction multiplies the values of the `left` and `right` vectors, subtracts the value of the `minuend` vector, and writes the result to the destination SIMD&FP register.|<11.5>|<11.5>|<11>|<115>|
FusedMultiplySubtractScalar|This instruction multiplies the values of the`left` and `right` vectors, negates the product, adds that to the value of the `minuend` vector, and writes the result to the SIMD&FP destination register.|<11.5>|<11.5>|<11>|<-115>|
FusedSubtractHalving|This instruction subtracts the vector elements in the `right` from the corresponding vector elements in the `left` vector, shifts each result right one bit, places each result into a vector, and writes the vector to the destination SIMD&FP register.|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<251, 251, 251, 251, 251, 251, 251, 251>||
Insert|This instruction copies the value `data` to the specified `index` vector element in the result vector. This instruction can insert data into individual elements within a result vector without clearing the remaining bits to zero.|<11, 12, 13, 14, 15, 16, 17, 18>|4|200|<11, 12, 13, 14, 200, 16, 17, 18>|
InsertScalar|This instruction copies the vector element of the `vector` to the specified vector element at `index` of the result vector. This instruction can insert `data` into individual elements within the result vector without clearing the remaining bits to zero.|<5.5, 5.5>|1|<15.5>|<5.5, 15.5>|
LeadingSignCount|Count Leading Sign bits counts the number of leading bits of individual elements of  `value` vector that have the same value as the most significant bit of the register, and writes the result to the result vector. This count does not include the most significant bit of the source register.|<32757, 165, 0, 15>|<0, 7, 15, 11>|||
LeadingZeroCount|Count Leading Zeros counts the number of binary zero bits before the first binary one bit in individual elemtents of the `value` vector , and writes the result to the result vector.|<32757, 165, 0, 15>|<1, 8, 16, 12>|||
LoadAndInsertScalar|This instruction loads a single-element structure from memory and writes the result to the specified `index` of the`value` vector without affecting the other bits of the vector.|<11, 12, 13, 14, 15, 16, 17, 18>|2|Address of byte[]{ 21, 22, 23, 24, 25, 26, 27, 28 }|<11, 12, 21, 14, 15, 16, 17, 18>|
LoadAndReplicateToVector64|This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the result vector.|Address of byte[]{ 11}|<11, 11, 11, 11, 11, 11, 11, 11>|||
LoadAndReplicateToVector128|This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the result vector.|Address of byte[]{ 11}|<11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11>|||
LoadVector64|This instruction loads a multiple-element structure from memory and writes it to the result vector. If multiple element structure falls short of filling all lanes, than they are set to 0.|Address of  new byte[14] { 21, 22, 23, 24, 25, 26, 27, 28, 1, 2, 23, 24, 25, 26}|<21, 22, 23, 24, 25, 26, 27, 28>|||
LoadVector128|This instruction loads a multiple-element structure from memory and writes it to the result vector. If multiple element structure falls short of filling all lanes, than they are set to 0.|Address of  new byte[14] { 21, 22, 23, 24, 25, 26, 27, 28, 1, 2, 23, 24, 25, 26}|<21, 22, 23, 24, 25, 26, 27, 28, 1, 2, 23, 24, 25, 26, 0, 0>|||
Max|This instruction compares corresponding elements in the vectors in the `left` and `right` vector, places the larger of each pair into a vector, and  writes the vector to the destination SIMD&FP register.|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<21, 22, 23, 24, 25, 26, 27, 28>||
MaxNumber|This instruction compares corresponding vector elements in `left` and `right` vectors, writes the larger of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register. NaNs are handled according to the IEEE 754-2008 standard. If one vector element is numeric and the other is a quiet NaN, the result placed in the vector is the numerical value, otherwise the result is identical to `MaxScalar()`.|<11.5, 12.5>|<21.5, 22.5>|<21.5, 22.5>||
MaxNumberScalar|This instruction compares corresponding vector elements in `left` and `right` values, writes the larger of the two floating-point values into the result, and writes the vector to the destination SIMD&FP register. NaNs are handled according to the IEEE 754-2008 standard. If one vector element is numeric and the other is a quiet NaN, the result placed in the vector is the numerical value, otherwise the result is identical to `MaxScalar()`.|<11.5>|<11.5>|<11.5>||
MaxPairwise|This instruction creates a vector by concatenating the vector elements of the `left` after the vector elements of the `right` vector, reads each pair of adjacent vector elements in the vectors, writes the largest of each pair into a result vector, and writes the vector to the destination SIMD&FP register.|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<12, 14, 16, 18, 22, 24, 26, 28>||
Min|This instruction compares corresponding elements in the vectors in the `left` and `right` vector, places the smaller of each pair into a vector, and  writes the vector to the destination SIMD&FP register.|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<11, 12, 13, 14, 15, 16, 17, 18>||
MinNumber|This instruction compares corresponding vector elements in `left` and `right` vectors, writes the smaller of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register. NaNs are handled according to the IEEE 754-2008 standard. If one vector element is numeric and the other is a quiet NaN, the result placed in the vector is the numerical value, otherwise the result is identical to `MaxScalar()`.|<11.5, 12.5>|<21.5, 22.5>|<11.5, 12.5>||
MinNumberScalar|This instruction compares corresponding vector elements in `left` and `right` values, writes the smaller of the two floating-point values into the result, and writes the vector to the destination SIMD&FP register. NaNs are handled according to the IEEE 754-2008 standard. If one vector element is numeric and the other is a quiet NaN, the result placed in the vector is the numerical value, otherwise the result is identical to `MaxScalar()`.|<11.5>|<11.5>|<11.5>||
MinPairwise|This instruction creates a vector by concatenating the vector elements of the `left` after the vector elements of the `right` vector, reads each pair of adjacent vector elements in the vectors, writes the smaller of each pair into a result vector, and writes the vector to the destination SIMD&FP register.|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<11, 13, 15, 17, 21, 23, 25, 27>||
Multiply|This method performs multiplication of vector elements in `left` with corresponding elements in `right` vector, writes the result to a vector and returns that vector.|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<231, 8, 43, 80, 119, 160, 203, 248>||
MultiplyAdd|This instruction multiplies corresponding elements in the vectors of the `left` and `right` vectors, and accumulates the results with the vector elements of the `addend` and return the accumulated result.|<11, 12, 13, 14, 15, 16, 17, 18>|<2, 22, 23, 24, 25, 26, 27, 28>|<3, 32, 33, 34, 35, 36, 37, 38>|<17, 204, 4, 62, 122, 184, 248, 58>|
MultiplyAddByScalar|This instruction multiplies the vector elements in the `left` by the 0th lane value in the `right`, and accumulates the results with the vector elements of the `addend` vector.|<11, 12, 13, 14>|<21, 22, 23, 24>|<31, 32, 33, 34>|<662, 694, 726, 758>|
MultiplyAddBySelectedScalar|This instruction multiplies the vector elements in the `left` by the `rightIndex` lane value in the `right` vector, and accumulates the results with the vector elements of the `addend` vector.|<100, 100, 100, 100>|<11, 12, 13, 14>|<21, 22, 23, 24>|3|<364, 388, 412, 436>
MultiplyByScalar|This instruction multiplies the vector elements in the `left` by the 0th lane value in the `right` and returns the result vector.|<11, 12, 13, 14>|<21, 22, 23, 24>|<231, 252, 273, 294>||
MultiplyBySelectedScalar|This instruction multiplies the vector elements in the `left` by the `rightIndex` lane value in the `right` vector, and returns the result.|<11, 12, 13, 14>|<21, 22, 23, 24>|3|<264, 288, 312, 336>|
MultiplyBySelectedScalarWideningLower|This instruction multiplies each vector element in the `left` vector by the `rightIndex` vector element of the `right` vector, places the result in a vector, and writes the vector to the destination SIMD&FP register. The result vector elements are twice as long as the elements that are multiplied.|<11, 12, 13, 14>|<21, 22, 23, 24>|3|<264, 288, 312, 336>|
MultiplyBySelectedScalarWideningLowerAndAdd|"This instruction multiplies corresponding values in the `left` and `right` vectors, and accumulates the results with the vector elements
of the `addend` vector and return the accumulated result. The destination vector elements are twice as long as the elements that are multiplied."|<1000, 1000, 1000, 1000>|<11, 12, 13, 14>|<21, 22, 23, 24>|2|<1253, 1276, 1299, 1322>
MultiplyBySelectedScalarWideningLowerAndSubtract|This instruction multiplies corresponding values in the `left` and `right` vectors, and subtracts the results from the vector elements of the `minuend` vector and return the accumulated result. The destination vector elements are twice as long as the elements that are multiplied.|<1000, 1000, 1000, 1000>|<11, 12, 13, 14>|<21, 22, 23, 24>|2|<747, 724, 701, 678>
MultiplyBySelectedScalarWideningUpper|This instruction multiplies each vector element in the `left`  by the specified `rightIndex` vector element of the `right`, places the result in a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14>|2|<345, 368, 391, 414>|
MultiplyBySelectedScalarWideningUpperAndAdd|This instruction multiplies corresponding values in `left` and `right` vectors, and accumulates the results with the vector elements of the `addend` vector and return the accumulated result. The destination vector elements are twice as long as the elements that are multiplied.|<1000, 1000, 1000, 1000>|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14>|0|<1165, 1176, 1187, 1198>
MultiplyBySelectedScalarWideningUpperAndSubtract|This instruction multiplies corresponding values in `left` and `right` vectors, and subtracts the results with the vector elements of the `minuend` vector and return the accumulated result. The destination vector elements are twice as long as the elements that are multiplied.|<11, 12, 13, 14>|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14>|0|<-154, -164, -174, -184>
MultiplyDoublingByScalarSaturateHigh|This instruction multiplies each vector element in the `left` by the 0th vector element of the `right` vector, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.|<1000, 12, 13, 14>|<100, 22, 23, 24>|<3, 0, 0, 0>||
MultiplyDoublingBySelectedScalarSaturateHigh|This instruction multiplies each vector element in the `left` by the specified vector element at `rightIndex` of the `right` vector, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.|<1000, 500, 13, 14>|<500, 22, 23, 24>|0|<15, 7, 0, 0>|
MultiplyDoublingSaturateHigh|This instruction multiplies the values of corresponding elements of the `left` and `right` vectors, doubles the results, places the most  significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.|<1000, 500, 13, 14>|<500, 22, 23, 24>|<15, 0, 0, 0>||
MultiplyDoublingWideningLowerAndAddSaturate|This instruction multiplies corresponding signed integer values in the`left` and `right` vectors, doubles the results, and accumulates the final results with the vector elements of the `addend` vector and return the accumulated result. The destination vector elements are twice as long as the elements that are multiplied. If overflow occurs with any of the results, those results are saturated.|<11, 12, 13, 14>|<11, 12, 13, 14>|<21, 22, 23, 24>|<473, 540, 611, 686>|
MultiplyDoublingWideningLowerAndSubtractSaturate|This instruction multiplies corresponding signed integer values in the`left` and `right` vectors, doubles the results, and substracts the final results from the vector elements of the `minuend` vector and return the result. The destination vector elements are twice as long as the elements that are multiplied. If overflow occurs with any of the results, those results are saturated.|<11, 12, 13, 14>|<11, 12, 13, 14>|<21, 22, 23, 24>|<-451, -516, -585, -658>|
MultiplyDoublingWideningLowerByScalarAndAddSaturate|This instruction multiplies each vector element in the `left` and `right` vectors by the 0th element of the `right` vector, doubles the results, and accumulates the final results with the vector elements of the `addend` vector and return the accumulated result. The destination vector elements are twice as long as the elements that are multiplied. If overflow occurs with any of the results, those results are saturated.|<11, 12, 13, 14>|<11, 12, 13, 14>|<21, 22, 23, 24>|<473, 516, 559, 602>|
MultiplyDoublingWideningLowerByScalarAndSubtractSaturate|This instruction multiplies each vector element in the `left` and `right` vectors by the 0th element of the `right` vector, doubles the results, and subtracts the final results from the vector elements of the `minuend` vector and return the result. The destination vector elements are twice as long as the elements that are multiplied. If overflow occurs with any of the results, those results are saturated.|<11, 12, 13, 14>|<11, 12, 13, 14>|<21, 22, 23, 24>|<-451, -492, -533, -574>|
MultiplyDoublingWideningLowerBySelectedScalarAndAddSaturate|This instruction multiplies each vector element in the `left` and `right` vectors by the `rightIndex` element of the `right` vector, doubles the results, and accumulates the final results with the vector elements of the `addend` vector and return the accumulated result. The destination vector elements are twice as long as the elements that are multiplied. If overflow occurs with any of the results, those results are saturated.|<11, 12, 13, 14>|<11, 12, 13, 14>|<21, 22, 23, 24>|0|<473, 516, 559, 602>
MultiplyDoublingWideningLowerBySelectedScalarAndSubtractSaturate|This instruction multiplies each vector element in the `left` and `right` vectors by the `rightIndex` element of the `right` vector, doubles the results, and subtracts the final results from the vector elements of the `minuend` vector and return the result. The destination vector elements are twice as long as the elements that are multiplied. If overflow occurs with any of the results, those results are saturated.|<11, 12, 13, 14>|<11, 12, 13, 14>|<21, 22, 23, 24>|0|<-451, -492, -533, -574>
MultiplyDoublingWideningSaturateLower|This instruction multiplies corresponding vector elements in the `left` and `right` vectors, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&FP register. If overflow occurs with any of the results, those results are saturated.|<11, 12, 13, 14>|<21, 22, 23, 24>|<462, 528, 598, 672>||
MultiplyDoublingWideningSaturateLowerByScalar|This instruction multiplies each vector element in the `left` by the 0th vector element of the `right` vector, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&FP register. If overflow occurs with any of the results, those results are saturated.|<11, 12, 13, 14>|<21, 22, 23, 24>|<462, 504, 546, 588>||
MultiplyDoublingWideningSaturateLowerBySelectedScalar|This instruction multiplies each vector element in the `left` by the `rightIndex` vector element of the `right` vector, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&FP register. If overflow occurs with any of the results, those results are saturated.|<11, 12, 13, 14>|<21, 22, 23, 24>|2|<506, 552, 598, 644>|
MultiplyDoublingWideningSaturateUpper|This instruction multiplies upper half of corresponding vector elements in the `left` and `right` vectors, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&FP register. If overflow occurs with any of the results, those results are saturated.|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<750, 832, 918, 1008>||
MultiplyDoublingWideningSaturateUpperByScalar|This instruction multiplies upper half of each vector element in the `left` by the 0th vector element of the `right` vector, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&FP register. If overflow occurs with any of the results, those results are saturated.|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14>|<330, 352, 374, 396>||
MultiplyDoublingWideningSaturateUpperBySelectedScalar|This instruction multiplies upper half of each vector element in the `left` by the `rightIndex` vector element of the `right` vector, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&FP register. If overflow occurs with any of the results, those results are saturated.|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14>|2|<390, 416, 442, 468>|
MultiplyDoublingWideningUpperAndAddSaturate|This instruction multiplies corresponding values in upper half of  `left` and `right` vectors, doubles the results, and accumulates the final results with the vector elements of the `addend` vector. The destination vector elements are twice as long as the elements that are multiplied. If overflow occurs with any of the results, those results are saturated.|<11, 12, 13, 14>|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<761, 844, 931, 1022>|
MultiplyDoublingWideningUpperAndSubtractSaturate|This instruction multiplies upper half of corresponding values in upper half of `left` and `right` vectors, doubles the results, and subtracts the final results with the vector elements of the `minuend` vector. The destination vector elements are twice as long as the elements that are multiplied. If overflow occurs with any of the results, those results are saturated.|<11, 12, 13, 14>|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<-739, -820, -905, -994>|
MultiplyDoublingWideningUpperByScalarAndAddSaturate|This instruction multiplies each vector element in the upper half of `left` by the 0th vector element of the `right` vector, doubles the results, and accumulates the final results with the vector elements of the `addend`. The destination vector elements are twice as long as the elements that are multiplied. If overflow occurs with any of the results, those results are saturated.|<11, 12, 13, 14>|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14>|<341, 364, 387, 410>|
MultiplyDoublingWideningUpperByScalarAndSubtractSaturate|This instruction multiplies each vector element in the upper half of `left` by the 0th vector element of the `right` vector, doubles the results, and subtracts the final results with the vector elements of the `minuend`. The destination vector elements are twice as long as the elements that are multiplied. If overflow occurs with any of the results, those results are saturated.|<11, 12, 13, 14>|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14>|<-319, -340, -361, -382>|
MultiplyDoublingWideningUpperBySelectedScalarAndAddSaturate|This instruction multiplies each vector element in the upper half of `left` by the specified vector element of the `right` vector, doubles the results, and accumulates the final results with the vector elements of the `addend`. The destination vector elements are twice as long as the elements that are multiplied. If overflow occurs with any of the results, those results are saturated.|<11, 12, 13, 14>|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14>|2|<401, 428, 455, 482>
MultiplyDoublingWideningUpperBySelectedScalarAndSubtractSaturate|This instruction multiplies each vector element in the upper half of `left` by the specified vector element of the `right` vector, doubles the results, and subtracts the final results with the vector elements of the `minuend`. The destination vector elements are twice as long as the elements that are multiplied. If overflow occurs with any of the results, those results are saturated.|<11, 12, 13, 14>|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14>|2|<-379, -404, -429, -454>
MultiplyRoundedDoublingByScalarSaturateHigh|This instruction multiplies each vector element in the `left` by the 0th vector element of the `right`, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register. The results are rounded.|<1000, 2000, 3000, 4000>|<30, 40, 50, 60>|<1, 2, 3, 4>||
MultiplyRoundedDoublingBySelectedScalarSaturateHigh|This instruction multiplies each vector element in the `left` by the `rightIndex` vector element of the `right`, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register. The results are rounded.|<1000, 2000, 3000, 4000>|<30, 40, 50, 60>|2|<2, 3, 5, 6>|
MultiplyRoundedDoublingSaturateHigh|This instruction multiplies the values of corresponding elements of the`left` and `right` vectors, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.|<1000, 2000, 3000, 4000>|<30, 40, 50, 60>|<1, 2, 5, 7>||
MultiplyScalar|This instruction multiplies the floating-point values of the`left` and `right` vectors, and writes the result to the destination SIMD&FP register.|<11.5>|<11.5>|<132.25>||
MultiplyScalarBySelectedScalar|This instruction multiplies the vector elements in the `left` vector by the `rightIndex` in the `right` vector, places the results in a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.|<11.5, 12.5>|<21.5, 22.5>|0|<247.25, 0>|
MultiplySubtract|This instruction multiplies corresponding elements in the vectors of the `left` and `right` vectors, and subtracts the results from the vector elements of the `minuend` vector and returns the result.|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<31, 32, 33, 34, 35, 36, 37, 38>|<128, 76, 22, 222, 164, 104, 42, 234>|
MultiplySubtractByScalar|This instruction multiplies the vector elements in the `left` vector by the 0th value in the `right` vector, and subtracts the results from the vector elements of the `minuend`.|<11, 12, 13, 14>|<21, 22, 23, 24>|<31, 32, 33, 34>|<-640, -670, -700, -730>|
MultiplySubtractBySelectedScalar|This instruction multiplies the vector elements in the `left` vector by the `rightIndex` value in the `right` vector, and subtracts the results from the vector elements of the `minuend`.|<11, 12, 13, 14>|<21, 22, 23, 24>|<31, 32, 33, 34>|2|<-682, -714, -746, -778>
MultiplyWideningLower|This instruction multiplies corresponding vector elements in the `left` and `right` vector, places the result in a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<231, 264, 299, 336, 375, 416, 459, 504>||
MultiplyWideningLowerAndAdd|This instruction multiplies the vector elements in the `left`  by the corresponding vector elements of the `right` vector, and accumulates the results with the vector elements of the `addend` vector. The destination vector elements are twice as long as the elements that are multiplied.|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<242, 276, 312, 350, 390, 432, 476, 522>|
MultiplyWideningLowerAndSubtract|This instruction multiplies the vector elements in the `left`  by the corresponding vector elements of the `right` vector, and subtracts the results with the vector elements from the `minuend` vector. The destination vector elements are twice as long as the elements that are multiplied.|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<65316, 65284, 65250, 65214, 65176, 65136, 65094, 65050>|
MultiplyWideningUpper|This instruction multiplies corresponding vector elements in the upper-half of `left` and `right` vector, places the result in a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.|<11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26>|<21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36>|<551, 600, 651, 704, 759, 816, 875, 936>||
MultiplyWideningUpperAndAdd|This instruction multiplies the vector elements in the  upper-half of `left`  by the corresponding vector elements of the `right` vector, and accumulates the results with the vector elements of the `addend` vector. The destination vector elements are twice as long as the elements that are multiplied.|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26>|<21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36>|<562, 612, 664, 718, 774, 832, 892, 954>|
MultiplyWideningUpperAndSubtract|This instruction multiplies the vector elements in the  upper-half of `left`  by the corresponding vector elements of the `right` vector, and subtracts the results with the vector elements from the `minuend` vector. The destination vector elements are twice as long as the elements that are multiplied.|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26>|<21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36>|<64996, 64948, 64898, 64846, 64792, 64736, 64678, 64618>|
Negate|This instruction reads each vector element from the `value` vector, negates each value, puts the result into a vector, and writes the vector to the destination SIMD&FP register.|<11, 12, 13, 14>|<-11, -12, -13, -14>|||
NegateSaturate|This instruction reads each vector element from the `value` vector, negates each value, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values. If overflow occurs with any of the results, those results are saturated.|<11, 12, 13, 14>|<-11, -12, -13, -14>|||
NegateScalar|This instruction negates the value in the `value` and writes the result to the SIMD&FP destination register.|<11.5>|<-11.5>|||
Not|This instruction reads each vector element from the `value` vector, performs bitwise inverse of each value, puts the result into a vector, and writes the vector to the destination SIMD&FP register.|<11, 12, 13, 14, 15, 16, 17, 18>|<244, 243, 242, 241, 240, 239, 238, 237>|||
Or|This instruction performs a bitwise OR between the `left` and `right` vectors, and writes the result to the destination SIMD&FP register.|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<31, 30, 31, 30, 31, 26, 27, 30>||
OrNot|This instruction performs a bitwise OR NOT between the `left` and `right` vectors, and writes the result to the destination SIMD&FP register.|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<235, 237, 237, 239, 239, 245, 245, 243>||
PolynomialMultiply|This instruction multiplies corresponding elements in the vectors of the `left` and `right` vectors, places the results in a vector, and writes the vector to the destination SIMD&FP register.|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<151, 232, 243, 144, 135, 160, 171, 248>||
PolynomialMultiplyWideningLower|This instruction multiplies corresponding elements in the `left` and `right` vectors, places the results in a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<151, 232, 243, 144, 135, 416, 427, 504>||
PolynomialMultiplyWideningUpper|This instruction multiplies corresponding elements in the upper-half of `left` with corresponding elements of `right` vectors, places the results in a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.|<11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26>|<21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36>|<503, 408, 403, 704, 759, 816, 779, 808>||
PopCount|This instruction counts the number of bits that have a value of one in each vector element in the `value` vector, places the result into a vector, and writes the vector to the destination SIMD&FP register.|<11, 12, 13, 14, 15, 16, 17, 18>|<3, 2, 3, 3, 4, 1, 2, 2>|||
ReciprocalEstimate|Performs 'ReciprocalEstimate' operation|<11.5, 12.5>|<0.08691406, 0.079833984>|||
ReciprocalSquareRootEstimate|Performs 'ReciprocalSquareRootEstimate' operation|<11.5, 12.5>|<0.29492188, 0.28222656>|||
ReciprocalSquareRootStep|Performs 'ReciprocalSquareRootStep' operation|<11.5, 12.5>|<21.5, 22.5>|<-122.125, -139.125>||
ReciprocalStep|Performs 'ReciprocalStep' operation|<11.5, 12.5>|<21.5, 22.5>|<-245.25, -279.25>||
ReverseElement16|Performs 'ReverseElement16' operation|<11, 12>|<720896, 786432>|||
ReverseElement32|Performs 'ReverseElement32' operation|<11>|<47244640256>|||
ReverseElement8|Performs 'ReverseElement8' operation|<11, 12, 13, 14>|<2816, 3072, 3328, 3584>|||
RoundAwayFromZero|Performs 'RoundAwayFromZero' operation|<11.5, 12.5>|<12, 13>|||
RoundAwayFromZeroScalar|Performs 'RoundAwayFromZeroScalar' operation|<11.5>|<12>|||
RoundToNearest|Performs 'RoundToNearest' operation|<11.5, 12.5>|<12, 12>|||
RoundToNearestScalar|Performs 'RoundToNearestScalar' operation|<11.5>|<12>|||
RoundToNegativeInfinity|Performs 'RoundToNegativeInfinity' operation|<11.5, 12.5>|<11, 12>|||
RoundToNegativeInfinityScalar|Performs 'RoundToNegativeInfinityScalar' operation|<11.5>|<11>|||
RoundToPositiveInfinity|Performs 'RoundToPositiveInfinity' operation|<11.5, 12.5>|<12, 13>|||
RoundToPositiveInfinityScalar|Performs 'RoundToPositiveInfinityScalar' operation|<11.5>|<12>|||
RoundToZero|Performs 'RoundToZero' operation|<11.5, 12.5>|<11, 12>|||
RoundToZeroScalar|Performs 'RoundToZeroScalar' operation|<11.5>|<11>|||
ShiftArithmetic|Performs 'ShiftArithmetic' operation|<11, 12, 13, 14>|<21, 22, 23, 24>|<0, 0, 0, 0>||
ShiftArithmeticRounded|Performs 'ShiftArithmeticRounded' operation|<11, 12, 13, 14>|<21, 22, 23, 24>|<0, 0, 0, 0>||
ShiftArithmeticRoundedSaturate|Performs 'ShiftArithmeticRoundedSaturate' operation|<11, 12, 13, 14>|<21, 22, 23, 24>|<32767, 32767, 32767, 32767>||
ShiftArithmeticRoundedSaturateScalar|Performs 'ShiftArithmeticRoundedSaturateScalar' operation|<11>|<11>|<22528>||
ShiftArithmeticRoundedScalar|Performs 'ShiftArithmeticRoundedScalar' operation|<11>|<11>|<22528>||
ShiftArithmeticSaturate|Performs 'ShiftArithmeticSaturate' operation|<11, 12, 13, 14>|<21, 22, 23, 24>|<32767, 32767, 32767, 32767>||
ShiftArithmeticSaturateScalar|Performs 'ShiftArithmeticSaturateScalar' operation|<11>|<11>|<22528>||
ShiftArithmeticScalar|Performs 'ShiftArithmeticScalar' operation|<11>|<11>|<22528>||
ShiftLeftAndInsert|Performs 'ShiftLeftAndInsert' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|0|<21, 22, 23, 24, 25, 26, 27, 28>|
ShiftLeftAndInsertScalar|Performs 'ShiftLeftAndInsertScalar' operation|<11>|<11>|0|<11>|
ShiftLeftLogical|Performs 'ShiftLeftLogical' operation|<11, 12, 13, 14, 15, 16, 17, 18>|0|<11, 12, 13, 14, 15, 16, 17, 18>||
ShiftLeftLogicalSaturate|Performs 'ShiftLeftLogicalSaturate' operation|<11, 12, 13, 14, 15, 16, 17, 18>|0|<11, 12, 13, 14, 15, 16, 17, 18>||
ShiftLeftLogicalSaturateScalar|Performs 'ShiftLeftLogicalSaturateScalar' operation|<11>|0|<11>||
ShiftLeftLogicalSaturateUnsigned|Performs 'ShiftLeftLogicalSaturateUnsigned' operation|<11, 12, 13, 14>|0|<11, 12, 13, 14>||
ShiftLeftLogicalSaturateUnsignedScalar|Performs 'ShiftLeftLogicalSaturateUnsignedScalar' operation|<11>|0|<11>||
ShiftLeftLogicalScalar|Performs 'ShiftLeftLogicalScalar' operation|<11>|0|<11>||
ShiftLeftLogicalWideningLower|Performs 'ShiftLeftLogicalWideningLower' operation|<11, 12, 13, 14, 15, 16, 17, 18>|0|<11, 12, 13, 14, 15, 16, 17, 18>||
ShiftLeftLogicalWideningUpper|Performs 'ShiftLeftLogicalWideningUpper' operation|<11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26>|0|<19, 20, 21, 22, 23, 24, 25, 26>||
ShiftLogical|Performs 'ShiftLogical' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14, 15, 16, 17, 18>|<0, 0, 0, 0, 0, 0, 0, 0>||
ShiftLogicalRounded|Performs 'ShiftLogicalRounded' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14, 15, 16, 17, 18>|<0, 0, 0, 0, 0, 0, 0, 0>||
ShiftLogicalRoundedSaturate|Performs 'ShiftLogicalRoundedSaturate' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14, 15, 16, 17, 18>|<255, 255, 255, 255, 255, 255, 255, 255>||
ShiftLogicalRoundedSaturateScalar|Performs 'ShiftLogicalRoundedSaturateScalar' operation|<11>|<11>|<22528>||
ShiftLogicalRoundedScalar|Performs 'ShiftLogicalRoundedScalar' operation|<11>|<11>|<22528>||
ShiftLogicalSaturate|Performs 'ShiftLogicalSaturate' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14, 15, 16, 17, 18>|<255, 255, 255, 255, 255, 255, 255, 255>||
ShiftLogicalSaturateScalar|Performs 'ShiftLogicalSaturateScalar' operation|<11>|<11>|<22528>||
ShiftLogicalScalar|Performs 'ShiftLogicalScalar' operation|<11>|<11>|<22528>||
ShiftRightAndInsert|Performs 'ShiftRightAndInsert' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|0|TODO|
ShiftRightAndInsertScalar|Performs 'ShiftRightAndInsertScalar' operation|<11>|<11>|0|TODO|
ShiftRightArithmetic|Performs 'ShiftRightArithmetic' operation|<11, 12, 13, 14>|0|TODO||
ShiftRightArithmeticAdd|Performs 'ShiftRightArithmeticAdd' operation|<11, 12, 13, 14>|<21, 22, 23, 24>|0|TODO|
ShiftRightArithmeticAddScalar|Performs 'ShiftRightArithmeticAddScalar' operation|<11>|<11>|0|TODO|
ShiftRightArithmeticNarrowingSaturateLower|Performs 'ShiftRightArithmeticNarrowingSaturateLower' operation|<11, 12, 13, 14>|0|TODO||
ShiftRightArithmeticNarrowingSaturateUnsignedLower|Performs 'ShiftRightArithmeticNarrowingSaturateUnsignedLower' operation|<11, 12, 13, 14, 15, 16, 17, 18>|0|TODO||
ShiftRightArithmeticNarrowingSaturateUnsignedUpper|Performs 'ShiftRightArithmeticNarrowingSaturateUnsignedUpper' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14, 15, 16, 17, 18>|0|TODO|
ShiftRightArithmeticNarrowingSaturateUpper|Performs 'ShiftRightArithmeticNarrowingSaturateUpper' operation|<11, 12, 13, 14>|<11, 12, 13, 14>|0|TODO|
ShiftRightArithmeticRounded|Performs 'ShiftRightArithmeticRounded' operation|<11, 12, 13, 14>|0|TODO||
ShiftRightArithmeticRoundedAdd|Performs 'ShiftRightArithmeticRoundedAdd' operation|<11, 12, 13, 14>|<21, 22, 23, 24>|0|TODO|
ShiftRightArithmeticRoundedAddScalar|Performs 'ShiftRightArithmeticRoundedAddScalar' operation|<11>|<11>|0|TODO|
ShiftRightArithmeticRoundedNarrowingSaturateLower|Performs 'ShiftRightArithmeticRoundedNarrowingSaturateLower' operation|<11, 12, 13, 14>|0|TODO||
ShiftRightArithmeticRoundedNarrowingSaturateUnsignedLower|Performs 'ShiftRightArithmeticRoundedNarrowingSaturateUnsignedLower' operation|<11, 12, 13, 14, 15, 16, 17, 18>|0|TODO||
ShiftRightArithmeticRoundedNarrowingSaturateUnsignedUpper|Performs 'ShiftRightArithmeticRoundedNarrowingSaturateUnsignedUpper' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14, 15, 16, 17, 18>|0|TODO|
ShiftRightArithmeticRoundedNarrowingSaturateUpper|Performs 'ShiftRightArithmeticRoundedNarrowingSaturateUpper' operation|<11, 12, 13, 14>|<11, 12, 13, 14>|0|TODO|
ShiftRightArithmeticRoundedScalar|Performs 'ShiftRightArithmeticRoundedScalar' operation|<11>|0|TODO||
ShiftRightArithmeticScalar|Performs 'ShiftRightArithmeticScalar' operation|<11>|0|TODO||
ShiftRightLogical|Performs 'ShiftRightLogical' operation|<11, 12, 13, 14, 15, 16, 17, 18>|0|TODO||
ShiftRightLogicalAdd|Performs 'ShiftRightLogicalAdd' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|0|TODO|
ShiftRightLogicalAddScalar|Performs 'ShiftRightLogicalAddScalar' operation|<11>|<11>|0|TODO|
ShiftRightLogicalNarrowingLower|Performs 'ShiftRightLogicalNarrowingLower' operation|<11, 12, 13, 14, 15, 16, 17, 18>|0|TODO||
ShiftRightLogicalNarrowingSaturateLower|Performs 'ShiftRightLogicalNarrowingSaturateLower' operation|<11, 12, 13, 14, 15, 16, 17, 18>|0|TODO||
ShiftRightLogicalNarrowingSaturateUpper|Performs 'ShiftRightLogicalNarrowingSaturateUpper' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14, 15, 16, 17, 18>|0|TODO|
ShiftRightLogicalNarrowingUpper|Performs 'ShiftRightLogicalNarrowingUpper' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14, 15, 16, 17, 18>|0|TODO|
ShiftRightLogicalRounded|Performs 'ShiftRightLogicalRounded' operation|<11, 12, 13, 14, 15, 16, 17, 18>|0|TODO||
ShiftRightLogicalRoundedAdd|Performs 'ShiftRightLogicalRoundedAdd' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|0|TODO|
ShiftRightLogicalRoundedAddScalar|Performs 'ShiftRightLogicalRoundedAddScalar' operation|<11>|<11>|0|TODO|
ShiftRightLogicalRoundedNarrowingLower|Performs 'ShiftRightLogicalRoundedNarrowingLower' operation|<11, 12, 13, 14, 15, 16, 17, 18>|0|TODO||
ShiftRightLogicalRoundedNarrowingSaturateLower|Performs 'ShiftRightLogicalRoundedNarrowingSaturateLower' operation|<11, 12, 13, 14, 15, 16, 17, 18>|0|TODO||
ShiftRightLogicalRoundedNarrowingSaturateUpper|Performs 'ShiftRightLogicalRoundedNarrowingSaturateUpper' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14, 15, 16, 17, 18>|0|TODO|
ShiftRightLogicalRoundedNarrowingUpper|Performs 'ShiftRightLogicalRoundedNarrowingUpper' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14, 15, 16, 17, 18>|0|TODO|
ShiftRightLogicalRoundedScalar|Performs 'ShiftRightLogicalRoundedScalar' operation|<11>|0|TODO||
ShiftRightLogicalScalar|Performs 'ShiftRightLogicalScalar' operation|<11>|0|TODO||
SignExtendWideningLower|Performs 'SignExtendWideningLower' operation|<11, 12, 13, 14>|<11, 12, 13, 14>|||
SignExtendWideningUpper|Performs 'SignExtendWideningUpper' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<15, 16, 17, 18>|||
SqrtScalar|Performs 'SqrtScalar' operation|<11.5>|<3.391164991562634>|||
Store|Performs 'Store' operation|<address>|<11, 12, 13, 14, 15, 16, 17, 18>|||
StoreSelectedScalar|Performs 'StoreSelectedScalar' operation|<address>|<11, 12, 13, 14, 15, 16, 17, 18>|0||
Subtract|Performs 'Subtract' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<246, 246, 246, 246, 246, 246, 246, 246>||
SubtractHighNarrowingLower|Performs 'SubtractHighNarrowingLower' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14, 15, 16, 17, 18>|<0, 0, 0, 0, 0, 0, 0, 0>||
SubtractHighNarrowingUpper|Performs 'SubtractHighNarrowingUpper' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14, 15, 16, 17, 18, 0, 0, 0, 0, 0, 0, 0, 0>|
SubtractRoundedHighNarrowingLower|Performs 'SubtractRoundedHighNarrowingLower' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14, 15, 16, 17, 18>|<0, 0, 0, 0, 0, 0, 0, 0>||
SubtractRoundedHighNarrowingUpper|Performs 'SubtractRoundedHighNarrowingUpper' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14, 15, 16, 17, 18, 0, 0, 0, 0, 0, 0, 0, 0>|
SubtractSaturate|Performs 'SubtractSaturate' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<0, 0, 0, 0, 0, 0, 0, 0>||
SubtractSaturateScalar|Performs 'SubtractSaturateScalar' operation|<11>|<11>|<0>||
SubtractScalar|Performs 'SubtractScalar' operation|<11.5>|<11.5>|<0>||
SubtractWideningLower|Performs 'SubtractWideningLower' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<65526, 65526, 65526, 65526, 65526, 65526, 65526, 65526>||
SubtractWideningUpper|Performs 'SubtractWideningUpper' operation|<11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26>|<21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36>|<65526, 65526, 65526, 65526, 65526, 65526, 65526, 65526>||
VectorTableLookup|Performs 'VectorTableLookup' operation|<11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26>|<11, 12, 13, 14, 15, 16, 17, 18>|<22, 23, 24, 25, 26, 0, 0, 0>||
VectorTableLookupExtension|Performs 'VectorTableLookupExtension' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26>|<21, 22, 23, 24, 25, 26, 27, 28>|<11, 12, 13, 14, 15, 16, 17, 18>|
Xor|Performs 'Xor' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<30, 26, 26, 22, 22, 10, 10, 14>||
ZeroExtendWideningLower|Performs 'ZeroExtendWideningLower' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 12, 13, 14, 15, 16, 17, 18>|||
ZeroExtendWideningUpper|Performs 'ZeroExtendWideningUpper' operation|<11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26>|<19, 20, 21, 22, 23, 24, 25, 26>|||
AbsSaturateScalar|Performs 'AbsSaturateScalar' operation|<11, 12, 13, 14>|<11, 0, 0, 0>|||
AbsoluteCompareGreaterThanScalar|Performs 'AbsoluteCompareGreaterThanScalar' operation|<11.5>|<11.5>|<0>||
AbsoluteCompareGreaterThanOrEqualScalar|Performs 'AbsoluteCompareGreaterThanOrEqualScalar' operation|<11.5>|<11.5>|<NaN>||
AbsoluteCompareLessThanScalar|Performs 'AbsoluteCompareLessThanScalar' operation|<11.5>|<11.5>|<0>||
AbsoluteCompareLessThanOrEqualScalar|Performs 'AbsoluteCompareLessThanOrEqualScalar' operation|<11.5>|<11.5>|<NaN>||
AbsoluteDifferenceScalar|Performs 'AbsoluteDifferenceScalar' operation|<11.5>|<11.5>|<0>||
AddAcross|Performs 'AddAcross' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<116, 0, 0, 0, 0, 0, 0, 0>|||
AddAcrossWidening|Performs 'AddAcrossWidening' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<116, 0, 0, 0>|||
AddPairwiseScalar|Performs 'AddPairwiseScalar' operation|<11.5, 12.5>|<24, 0>|||
CompareEqualScalar|Performs 'CompareEqualScalar' operation|<11.5>|<11.5>|<NaN>||
CompareGreaterThanScalar|Performs 'CompareGreaterThanScalar' operation|<11.5>|<11.5>|<0>||
CompareGreaterThanOrEqualScalar|Performs 'CompareGreaterThanOrEqualScalar' operation|<11.5>|<11.5>|<NaN>||
CompareLessThanScalar|Performs 'CompareLessThanScalar' operation|<11.5>|<11.5>|<0>||
CompareLessThanOrEqualScalar|Performs 'CompareLessThanOrEqualScalar' operation|<11.5>|<11.5>|<NaN>||
CompareTestScalar|Performs 'CompareTestScalar' operation|<11.5>|<11.5>|<NaN>||
ConvertToDouble|Performs 'ConvertToDouble' operation|<11.5, 12.5>|<11.5, 12.5>|||
ConvertToDoubleScalar|Performs 'ConvertToDoubleScalar' operation|<11>|<11>|||
ConvertToDoubleUpper|Performs 'ConvertToDoubleUpper' operation|<11.5, 12.5, 13.5, 14.5>|<13.5, 14.5>|||
ConvertToInt64RoundAwayFromZero|Performs 'ConvertToInt64RoundAwayFromZero' operation|<11.5, 12.5>|<12, 13>|||
ConvertToInt64RoundAwayFromZeroScalar|Performs 'ConvertToInt64RoundAwayFromZeroScalar' operation|<11.5>|<12>|||
ConvertToInt64RoundToEven|Performs 'ConvertToInt64RoundToEven' operation|<11.5, 12.5>|<12, 12>|||
ConvertToInt64RoundToEvenScalar|Performs 'ConvertToInt64RoundToEvenScalar' operation|<11.5>|<12>|||
ConvertToInt64RoundToNegativeInfinity|Performs 'ConvertToInt64RoundToNegativeInfinity' operation|<11.5, 12.5>|<11, 12>|||
ConvertToInt64RoundToNegativeInfinityScalar|Performs 'ConvertToInt64RoundToNegativeInfinityScalar' operation|<11.5>|<11>|||
ConvertToInt64RoundToPositiveInfinity|Performs 'ConvertToInt64RoundToPositiveInfinity' operation|<11.5, 12.5>|<12, 13>|||
ConvertToInt64RoundToPositiveInfinityScalar|Performs 'ConvertToInt64RoundToPositiveInfinityScalar' operation|<11.5>|<12>|||
ConvertToInt64RoundToZero|Performs 'ConvertToInt64RoundToZero' operation|<11.5, 12.5>|<11, 12>|||
ConvertToInt64RoundToZeroScalar|Performs 'ConvertToInt64RoundToZeroScalar' operation|<11.5>|<11>|||
ConvertToSingleLower|Performs 'ConvertToSingleLower' operation|<11.5, 12.5>|<11.5, 12.5>|||
ConvertToSingleRoundToOddLower|Performs 'ConvertToSingleRoundToOddLower' operation|<11.5, 12.5>|<11.5, 12.5>|||
ConvertToSingleRoundToOddUpper|Performs 'ConvertToSingleRoundToOddUpper' operation|<11.5, 12.5>|<11.5, 12.5>|<11.5, 12.5, 11.5, 12.5>||
ConvertToSingleUpper|Performs 'ConvertToSingleUpper' operation|<11.5, 12.5>|<11.5, 12.5>|<11.5, 12.5, 11.5, 12.5>||
ConvertToUInt64RoundAwayFromZero|Performs 'ConvertToUInt64RoundAwayFromZero' operation|<11.5, 12.5>|<12, 13>|||
ConvertToUInt64RoundAwayFromZeroScalar|Performs 'ConvertToUInt64RoundAwayFromZeroScalar' operation|<11.5>|<12>|||
ConvertToUInt64RoundToEven|Performs 'ConvertToUInt64RoundToEven' operation|<11.5, 12.5>|<12, 12>|||
ConvertToUInt64RoundToEvenScalar|Performs 'ConvertToUInt64RoundToEvenScalar' operation|<11.5>|<12>|||
ConvertToUInt64RoundToNegativeInfinity|Performs 'ConvertToUInt64RoundToNegativeInfinity' operation|<11.5, 12.5>|<11, 12>|||
ConvertToUInt64RoundToNegativeInfinityScalar|Performs 'ConvertToUInt64RoundToNegativeInfinityScalar' operation|<11.5>|<11>|||
ConvertToUInt64RoundToPositiveInfinity|Performs 'ConvertToUInt64RoundToPositiveInfinity' operation|<11.5, 12.5>|<12, 13>|||
ConvertToUInt64RoundToPositiveInfinityScalar|Performs 'ConvertToUInt64RoundToPositiveInfinityScalar' operation|<11.5>|<12>|||
ConvertToUInt64RoundToZero|Performs 'ConvertToUInt64RoundToZero' operation|<11.5, 12.5>|<11, 12>|||
ConvertToUInt64RoundToZeroScalar|Performs 'ConvertToUInt64RoundToZeroScalar' operation|<11.5>|<11>|||
Divide|Performs 'Divide' operation|<11.5, 12.5>|<21.5, 22.5>|<0.53488374, 0.5555556>||
ExtractNarrowingSaturateScalar|Performs 'ExtractNarrowingSaturateScalar' operation|<11, 12, 13, 14>|<11, 0, 0, 0, 0, 0, 0, 0>|||
ExtractNarrowingSaturateUnsignedScalar|Performs 'ExtractNarrowingSaturateUnsignedScalar' operation|<11, 12, 13, 14>|<11, 0, 0, 0, 0, 0, 0, 0>|||
FusedMultiplyAddByScalar|Performs 'FusedMultiplyAddByScalar' operation|<11.5, 12.5>|<21.5, 22.5>|<11.5, 12.5>|<258.75, 271.25>|
FusedMultiplyAddBySelectedScalar|Performs 'FusedMultiplyAddBySelectedScalar' operation|<11.5, 12.5>|<21.5, 22.5>|<11.5, 12.5>|0|<258.75, 271.25>
FusedMultiplyAddScalarBySelectedScalar|Performs 'FusedMultiplyAddScalarBySelectedScalar' operation|<11.5>|<11.5>|<11.5, 12.5>|0|<143.75>
FusedMultiplySubtractByScalar|Performs 'FusedMultiplySubtractByScalar' operation|<11.5, 12.5>|<21.5, 22.5>|<11.5, 12.5>|<-235.75, -246.25>|
FusedMultiplySubtractBySelectedScalar|Performs 'FusedMultiplySubtractBySelectedScalar' operation|<11.5, 12.5>|<21.5, 22.5>|<11.5, 12.5>|0|<-235.75, -246.25>
FusedMultiplySubtractScalarBySelectedScalar|Performs 'FusedMultiplySubtractScalarBySelectedScalar' operation|<11.5>|<11.5>|<11.5, 12.5>|0|<-120.75>
InsertSelectedScalar|Performs 'InsertSelectedScalar' operation|<11, 12, 13, 14, 15, 16, 17, 18>|0|<21, 22, 23, 24, 25, 26, 27, 28>|1|<22, 12, 13, 14, 15, 16, 17, 18>
MaxAcross|Performs 'MaxAcross' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<18, 0, 0, 0, 0, 0, 0, 0>|||
MaxNumberAcross|Performs 'MaxNumberAcross' operation|<11.5, 12.5, 13.5, 14.5>|<14.5, 0>|||
MaxNumberPairwise|Performs 'MaxNumberPairwise' operation|<11.5, 12.5>|<21.5, 22.5>|<12.5, 22.5>||
MaxNumberPairwiseScalar|Performs 'MaxNumberPairwiseScalar' operation|<11.5, 12.5>|<12.5, 0>|||
MaxPairwiseScalar|Performs 'MaxPairwiseScalar' operation|<11.5, 12.5>|<12.5, 0>|||
MaxScalar|Performs 'MaxScalar' operation|<11.5>|<11.5>|<11.5>||
MinAcross|Performs 'MinAcross' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<11, 0, 0, 0, 0, 0, 0, 0>|||
MinNumberAcross|Performs 'MinNumberAcross' operation|<11.5, 12.5, 13.5, 14.5>|<11.5, 0>|||
MinNumberPairwise|Performs 'MinNumberPairwise' operation|<11.5, 12.5>|<21.5, 22.5>|<11.5, 21.5>||
MinNumberPairwiseScalar|Performs 'MinNumberPairwiseScalar' operation|<11.5, 12.5>|<11.5, 0>|||
MinPairwiseScalar|Performs 'MinPairwiseScalar' operation|<11.5, 12.5>|<11.5, 0>|||
MinScalar|Performs 'MinScalar' operation|<11.5>|<11.5>|<11.5>||
MultiplyDoublingSaturateHighScalar|Performs 'MultiplyDoublingSaturateHighScalar' operation|<11, 12, 13, 14>|<21, 22, 23, 24>|<0, 0, 0, 0>||
MultiplyDoublingScalarBySelectedScalarSaturateHigh|Performs 'MultiplyDoublingScalarBySelectedScalarSaturateHigh' operation|<11, 12, 13, 14>|<21, 22, 23, 24>|0|<0, 0, 0, 0>|
MultiplyDoublingWideningAndAddSaturateScalar|Performs 'MultiplyDoublingWideningAndAddSaturateScalar' operation|<11, 12>|<11, 12, 13, 14>|<21, 22, 23, 24>|<473, 0>|
MultiplyDoublingWideningAndSubtractSaturateScalar|Performs 'MultiplyDoublingWideningAndSubtractSaturateScalar' operation|<11, 12>|<11, 12, 13, 14>|<21, 22, 23, 24>|<-451, 0>|
MultiplyDoublingWideningSaturateScalar|Performs 'MultiplyDoublingWideningSaturateScalar' operation|<11, 12, 13, 14>|<21, 22, 23, 24>|<462, 0>||
MultiplyDoublingWideningSaturateScalarBySelectedScalar|Performs 'MultiplyDoublingWideningSaturateScalarBySelectedScalar' operation|<11, 12, 13, 14>|<21, 22, 23, 24>|0|<462, 0>|
MultiplyDoublingWideningScalarBySelectedScalarAndAddSaturate|Performs 'MultiplyDoublingWideningScalarBySelectedScalarAndAddSaturate' operation|<11, 12>|<11, 12, 13, 14>|<21, 22, 23, 24>|0|<473, 0>
MultiplyDoublingWideningScalarBySelectedScalarAndSubtractSaturate|Performs 'MultiplyDoublingWideningScalarBySelectedScalarAndSubtractSaturate' operation|<11, 12>|<11, 12, 13, 14>|<21, 22, 23, 24>|0|<-451, 0>
MultiplyExtended|Performs 'MultiplyExtended' operation|<11.5, 12.5>|<21.5, 22.5>|<247.25, 281.25>||
MultiplyExtendedByScalar|Performs 'MultiplyExtendedByScalar' operation|<11.5, 12.5>|<11.5>|<132.25, 143.75>||
MultiplyExtendedBySelectedScalar|Performs 'MultiplyExtendedBySelectedScalar' operation|<11.5, 12.5>|<21.5, 22.5>|0|<247.25, 268.75>|
MultiplyExtendedScalar|Performs 'MultiplyExtendedScalar' operation|<11.5>|<11.5>|<132.25>||
MultiplyExtendedScalarBySelectedScalar|Performs 'MultiplyExtendedScalarBySelectedScalar' operation|<11.5>|<11.5, 12.5>|0|<132.25>|
MultiplyRoundedDoublingSaturateHighScalar|Performs 'MultiplyRoundedDoublingSaturateHighScalar' operation|<11, 12, 13, 14>|<21, 22, 23, 24>|<0, 0, 0, 0>||
MultiplyRoundedDoublingScalarBySelectedScalarSaturateHigh|Performs 'MultiplyRoundedDoublingScalarBySelectedScalarSaturateHigh' operation|<11, 12, 13, 14>|<21, 22, 23, 24>|0|<0, 0, 0, 0>|
NegateSaturateScalar|Performs 'NegateSaturateScalar' operation|<11, 12, 13, 14>|<-11, 0, 0, 0>|||
ReciprocalEstimateScalar|Performs 'ReciprocalEstimateScalar' operation|<11.5>|<0.0869140625>|||
ReciprocalExponentScalar|Performs 'ReciprocalExponentScalar' operation|<11.5>|<0.25>|||
ReciprocalSquareRootEstimateScalar|Performs 'ReciprocalSquareRootEstimateScalar' operation|<11.5>|<0.294921875>|||
ReciprocalSquareRootStepScalar|Performs 'ReciprocalSquareRootStepScalar' operation|<11.5>|<11.5>|<-64.625>||
ReciprocalStepScalar|Performs 'ReciprocalStepScalar' operation|<11.5>|<11.5>|<-130.25>||
ShiftRightArithmeticNarrowingSaturateScalar|Performs 'ShiftRightArithmeticNarrowingSaturateScalar' operation|<11, 12>|0|TODO||
ShiftRightArithmeticNarrowingSaturateUnsignedScalar|Performs 'ShiftRightArithmeticNarrowingSaturateUnsignedScalar' operation|<11, 12, 13, 14>|0|TODO||
ShiftRightArithmeticRoundedNarrowingSaturateScalar|Performs 'ShiftRightArithmeticRoundedNarrowingSaturateScalar' operation|<11, 12>|0|TODO||
ShiftRightArithmeticRoundedNarrowingSaturateUnsignedScalar|Performs 'ShiftRightArithmeticRoundedNarrowingSaturateUnsignedScalar' operation|<11, 12, 13, 14>|0|TODO||
ShiftRightLogicalNarrowingSaturateScalar|Performs 'ShiftRightLogicalNarrowingSaturateScalar' operation|<11, 12, 13, 14>|0|TODO||
ShiftRightLogicalRoundedNarrowingSaturateScalar|Performs 'ShiftRightLogicalRoundedNarrowingSaturateScalar' operation|<11, 12, 13, 14>|0|TODO||
Sqrt|Performs 'Sqrt' operation|<11.5, 12.5>|<3.391165, 3.535534>|||
StorePair|Performs 'StorePair' operation|<address>|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>||
StorePairNonTemporal|Performs 'StorePairNonTemporal' operation|<address>|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>||
StorePairScalar|Performs 'StorePairScalar' operation|<address>|<11, 12>|<21, 22>||
StorePairScalarNonTemporal|Performs 'StorePairScalarNonTemporal' operation|<address>|<11, 12>|<21, 22>||
ReverseElementBits|Performs 'ReverseElementBits' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<208, 48, 176, 112, 240, 8, 136, 72>|||
TransposeEven|Performs 'TransposeEven' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<11, 21, 13, 23, 15, 25, 17, 27>||
TransposeOdd|Performs 'TransposeOdd' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<12, 22, 14, 24, 16, 26, 18, 28>||
UnzipEven|Performs 'UnzipEven' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<11, 13, 15, 17, 21, 23, 25, 27>||
UnzipOdd|Performs 'UnzipOdd' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<12, 14, 16, 18, 22, 24, 26, 28>||
ZipHigh|Performs 'ZipHigh' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<15, 25, 16, 26, 17, 27, 18, 28>||
ZipLow|Performs 'ZipLow' operation|<11, 12, 13, 14, 15, 16, 17, 18>|<21, 22, 23, 24, 25, 26, 27, 28>|<11, 21, 12, 22, 13, 23, 14, 24>||
